# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-30 14:01+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#: activity/activity.info:2
msgid "Clock"
msgstr ""

#: activity/activity.info:3
msgid ""
"Do you know the time? Now you do! Check out all the different ways you can "
"make your clock look too!"
msgstr ""

#. TRANS: Title of the activity
#: clock.py:127
msgid "What Time Is It?"
msgstr ""

#. TRANS: The format used when writing the time in full
#. letters.  You must take care to use a font size large enough
#. so that kids can read it easily, but also small enough so
#. that all times combination fit on the screen, even when the
#. screen is rotated.  Pango markup:
#. http://www.pygtk.org/docs/pygtk/pango-markup-language.html
#: clock.py:135
#, python-format
msgid "<markup><span lang=\"en\" font_desc=\"Sans 20\">%s</span></markup>"
msgstr ""

#. TRANS: The format used to display the weekday and date
#. (example: Tuesday 10/21/2008) We recommend to use the same
#. font size as for the time display.  See
#. http://docs.python.org/lib/module-time.html for available
#: clock.py:143
#, no-python-format
msgid ""
"<markup><span lang=\"en\" font_desc=\"Sans 20\"><span foreground=\"#B20008\">"
"%A</span>, <span foreground=\"#5E008C\">%m</span>/<span foreground="
"\"#B20008\">%d</span>/<span foreground=\"#9A5200\">%Y</span></span></markup>"
msgstr ""

#: clock.py:285
msgid "Simple Clock"
msgstr ""

#: clock.py:292
msgid "Nice Clock"
msgstr ""

#: clock.py:299
msgid "Digital Clock"
msgstr ""

#: clock.py:312
msgid "Display time in full letters"
msgstr ""

#: clock.py:318
msgid "Display weekday and date"
msgstr ""

#: clock.py:324
msgid "Talking clock"
msgstr ""

#: clock.py:333
msgid "Grab the hands"
msgstr ""

#: clock.py:345
msgid "Download time"
msgstr ""

#: clock.py:517
msgid "Download time began"
msgstr ""

#: clock.py:532
#, python-format
msgid "Download time failed (%d)"
msgstr ""

#: clock.py:549
msgid "Setting time in progress"
msgstr ""

#: clock.py:559
msgid "Download time done"
msgstr ""

#: clock.py:809
msgid ""
"<markup><span lang=\"en\" font_desc=\"Sans,Monospace Bold 96\"><span "
"foreground=\"#005FE4\">%I</span>:<span foreground=\"#00B20D\">%M</span>:"
"<span foreground=\"#E6000A\">%S</span>%p</span></markup>"
msgstr ""

#: clock.py:916
msgid ""
"<markup><span lang=\"en\" font_desc=\"Sans Bold 28\"><span foreground=\"white"
"\" background=\"black\"> AM </span><span foreground=\"lightgray\"> PM </"
"span></span></markup>"
msgstr ""

#: clock.py:920
msgid ""
"<markup><span lang=\"en\" font_desc=\"Sans Bold 28\"><span foreground="
"\"lightgray\"> AM </span><span foreground=\"white\" background=\"black\"> PM "
"</span></span></markup>"
msgstr ""

#. TRANS: The format of the font used to print hour
#. numbers, from 1 to 12.
#: clock.py:988
#, python-format
msgid "<markup><span lang=\"en\" font_desc=\"Sans Bold 40\">%d</span></markup>"
msgstr ""

#. TRANS: The rules to print the time in the localized language.
#.
#. Example syntax:
#. time(h, 15) => a quarter to hour(h) am_pm(h) |
#. The left hand side of the rule defines a pattern with a variable 'h' and a
#. value '15'.
#. The right hand side, when applied, will use the text "a quarter to " and call
#. the first rule matching hour(h) after substituting the variable 'h' by its value,
#. and call the rule matching am_pm(h).
#. Internal spaces are significant on the right side of a rule. In calls, all
#. arguments which are not numbers are considered to be variables. The rule parser
#. is very simple and will let many syntax errors go ignored.
#.
#. A rule ends with the character '|'.
#. The character '_' is a anonymous variable.
#. The character '#' can be used to concatenate two text fragments. For instance:
#. plural(1) => |
#. plural(_) => s |
#. hour(h) => number(h) hour#plural(h) |
#. Use '\#' to use a # character, for instance in a pango color
#. tag like <span foreground="\#FF0055">
#.
#. You can put range conditions on firing a rule, with the syntax [var1 < var2] or
#. [var1 < var2 < var3]. For instance:
#. hours(h) [h < 12] => in the morning |
#. hours(h) [12 < h < 18] => in the afternoon |
#. hours(_) => in the night |
#.
#. These rules will be called with the root pattern "time(hour, minute)", with the
#. variable 'hour' bound to the current hour and the variable 'minute' to the
#. current minute.
#. Order of rules is important. Rules are tried from first to last. So most precise
#. rule must be placed first in the list.
#.
#. You can validate your set of rules by running the command line:
#. python timewriter.py LANG
#.
#. You should use pango markup to respect the same colors as for the clock hands.
#. Look at the README file from the activity for explanations on how to create
#. rules.
#: timewriter.py:204
msgid "time(h, m) => What Time Is It?"
msgstr ""
"        time(12, 0) => <span foreground=\"\\#005FE4\">noon</span> |\n"
"        time(0, 0) => <span foreground=\"\\#005FE4\">midnight</span> |\n"
"        time(h, 0) => <span foreground=\"\\#005FE4\">hour(h)</span> o'clock "
"am_pm(h) |\n"
"        time(h, m) [m < 31] => <span foreground=\"\\#00B20D\">min(m)</span> "
"past <span foreground=\"\\#005FE4\">hour(h)</span> am_pm(h) |\n"
"        time(h, m) [30 < m] => <span foreground=\"\\#00B20D\">min(m)</span> to "
"<span foreground=\"\\#005FE4\">hour1(h)</span> am_pm(h) |\n"
"        min(1) => one minute |\n"
"        min(2) => two minutes |\n"
"        min(3) => three minutes |\n"
"        min(4) => four minutes |\n"
"        min(5) => five minutes |\n"
"        min(6) => six minutes |\n"
"        min(7) => seven minutes |\n"
"        min(8) => eight minutes |\n"
"        min(9) => nine minutes |\n"
"        min(10) => ten minutes |\n"
"        min(11) => eleven minutes |\n"
"        min(12) => twelve minutes |\n"
"        min(13) => thirteen minutes |\n"
"        min(14) => fourteen minutes |\n"
"        min(15) => a quarter |\n"
"        min(16) => sixteen minutes |\n"
"        min(17) => seventeen minutes |\n"
"        min(18) => eighteen minutes |\n"
"        min(19) => nineteen minutes |\n"
"        min(20) => twenty minutes |\n"
"        min(21) => twenty-one minutes |\n"
"        min(22) => twenty-two minutes |\n"
"        min(23) => twenty-three minutes |\n"
"        min(24) => twenty-four minutes |\n"
"        min(25) => twenty-five minutes |\n"
"        min(26) => twenty-six minutes |\n"
"        min(27) => twenty-seven minutes |\n"
"        min(28) => twenty-eight minutes |\n"
"        min(29) => twenty-nine minutes |\n"
"        min(30) => half |\n"
"        min(31) => twenty-nine minutes |\n"
"        min(32) => twenty-eight minutes |\n"
"        min(33) => twenty-seven minutes |\n"
"        min(34) => twenty-six minutes |\n"
"        min(35) => twenty-five minutes |\n"
"        min(36) => twenty-four minutes |\n"
"        min(37) => twenty-three minutes |\n"
"        min(38) => twenty-two minutes |\n"
"        min(39) => twenty-one minutes |\n"
"        min(40) => twenty minutes |\n"
"        min(41) => nineteen minutes |\n"
"        min(42) => eighteen minutes |\n"
"        min(43) => seventeen minutes |\n"
"        min(44) => thirteen minutes |\n"
"        min(45) => a quarter |\n"
"        min(46) => fourteen minutes |\n"
"        min(47) => thirteen minutes |\n"
"        min(48) => twelve minutes |\n"
"        min(49) => eleven minutes |\n"
"        min(50) => ten minutes |\n"
"        min(51) => nine minutes |\n"
"        min(52) => eight minutes |\n"
"        min(53) => seven minutes |\n"
"        min(54) => six minutes |\n"
"        min(55) => five minutes |\n"
"        min(56) => four minutes |\n"
"        min(57) => three minutes |\n"
"        min(58) => two minutes |\n"
"        min(59) => one minute |\n"
"        min(60) => sixty minutes |\n"
"        hour(0) => midnight |\n"
"        hour(1) => one |\n"
"        hour(2) => two |\n"
"        hour(3) => three |\n"
"        hour(4) => four |\n"
"        hour(5) => five |\n"
"        hour(6) => six |\n"
"        hour(7) => seven |\n"
"        hour(8) => eight |\n"
"        hour(9) => nine |\n"
"        hour(10) => ten |\n"
"        hour(11) => eleven |\n"
"        hour(12) => noon |\n"
"        hour(13) => one |\n"
"        hour(14) => two |\n"
"        hour(15) => three |\n"
"        hour(16) => four |\n"
"        hour(17) => five |\n"
"        hour(18) => six |\n"
"        hour(19) => seven |\n"
"        hour(20) => eight |\n"
"        hour(21) => nine |\n"
"        hour(22) => ten |\n"
"        hour(23) => eleven |\n"
"        am_pm(h) [ h < 12] => AM |\n"
"        am_pm(_) => PM"

#. TRANS: The language pitch (range [0 - 99], default 50 for English)
#. Look at http://espeak.sourceforge.net/commands.html for details
#: speaker.py:37
msgid "50"
msgstr ""

#. TRANS: The diction speed, in average words per minute (range [80 - 390],
#. default 170 for English).
#. Look at http://espeak.sourceforge.net/commands.html for details
#: speaker.py:44
msgid "170"
msgstr ""

#. TRANS: The pause duration between words, in units of 10 ms.
#. Look at http://espeak.sourceforge.net/commands.html for details
#: speaker.py:50
msgid "0"
msgstr ""

#. TRANS: The language and voice variant
#. Look at http://espeak.sourceforge.net/commands.html for details, and
#. http://espeak.sourceforge.net/languages.html to see if your language
#. is supported.
#: speaker.py:58
msgid "en"
msgstr ""
